ind <- (mean(heights$height) & heights$sex == "Female")
sum(ind)
heights$sex == "Female"
sum(ind)
(mean(heights$height) & heights$sex == "Female")
ind <- (mean(heights$height) & heights$sex == "Female")
sum(ind)
mean(heights$height)
ind <- (heights$height >mean(heights$height) & heights$sex == "Female")
sum(ind)
mean(heights$sex == "Female")
min(heights$height)
match(heights$height)
match(heights$height,50)
ind <- match(50,heights$height)
ind
heights$height[1032]
heights$sex[1032]
max(heights$height)
x <- 50:82
x
x < min(heights$height):max(heights$height)
x
x <- min(heights$height):max(heights$height)
x
x
x %in% heights$height != x
sum(x %in% heights$height != x)
x
x %in% heights$height
sum(x %in% heights$height)
sum( heights$height %in% x)
sum(( heights$height %in% x) != x)
x %in% heights$height
x %in% heights$height
!x %in% heights$height
sum(!x %in% heights$height)
x
sum(!x %in% heights$height)
x
count(x)
length(x)
sum(!x %in% heights$height)
x <- 50:82
x
ht_cm <- heights$height*2.54
head(ht_cm)
mutate(heights,ht_cm)
mutate(c(heights,ht_cm))
?mutate
??mutate
library(dplyr)
library("dplyr", lib.loc="~/R/win-library/3.5")
??mutate
ht_cm <- heights$sex*2.54
ht_cm <- heights$height*2.54
ht_cm <- heights$height*2.54
heights2 <- data.frame(heights,ht_cm)
head(heights2)
head(heights)
heights2$ht_cm[18]
mean(heights2$ht_cm)
females <- filter(heights2,heights2$sex =="Female")
females
length(females)
nrow(females)
mean(females$ht_cm)
library(olive)
library(dslabs)
data("olive")
head(olive)
ncol(olive)
plot(olive$palmitic,olive$palmitoleic)
hist(olive$eicosenoic)
boxplot(olive$palmitic~region)
boxplot(olive,olive$palmitic~region)
boxplot(olive$palmitic,olive$palmitic~region)
boxplot(olive$palmitic,region)
boxplot(olive$palmitic,olive$palmitic~region)
boxplot(olive,olive$palmitic~region)
head(olive)
boxplot(olive$region,olive$palmitic)
boxplot(olive$region,olive$palmitic~region)
boxplot(olive$palmitic,olive$palmitic~region)
boxplot(olive,olive$palmitic~region)
boxplot(olive,olive~region)
boxplot(olive$palmitic,olive~region)
boxplot(palmitic~region,data=olive)
boxplot(palmitic ~ region,data=olive)
boxplot(region~palmitic,data=olive)
a <- c(0,1,2,-4,5)
a
result <- ifelse(a > 0, 1/a, NA)
result
x <- c(1,2,-3,4)
if(all(x>0)){
print("All Positives")
} else{
print("Not All Positives")
}
x <- c("True","False","False","True")
x
str(x)
class(x)
x <- c(True,False,False,True)
x <- c(TRUE,FALSE,TRUE,FALSE)
class(x)
all(x)
any(x)
any(!x)
all(!x)
x<- c(1,3,9,2,4,1)
x
mean(x)
x<- c(1,3,9,2,4,1,100)
mean(x)
std(x)
sd(x)
sqrt(500)
10*sqrt(5)
library(dslabs)
heights
3/8
5/8
6/8
7/8
2/5
dotR <- file.path(Sys.getenv("HOME"), ".R")
if (!file.exists(dotR)) dir.create(dotR)
M <- file.path(dotR, "Makevars.win")
if (!file.exists(M)) file.create(M)
cat("\nCXX14FLAGS=-O3 -march=native",
"CXX14 = g++ -m$(WIN) -std=c++1y",
"CXX11FLAGS=-O3 -march=native",
file = M, sep = "\n", append = TRUE)
dotR <- file.path(Sys.getenv("HOME"), ".R")
if (!file.exists(dotR)) dir.create(dotR)
M <- file.path(dotR, "Makevars.win")
if (!file.exists(M)) file.create(M)
cat("\nCXX14FLAGS=-O3 -march=native",
"CXX14 = g++ -m$(WIN) -std=c++1y",
"CXX11FLAGS=-O3 -march=native",
file = M, sep = "\n", append = TRUE)
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
Sys.setenv(MAKEFLAGS = "-j4") # four cores used
install.packages("rstan", type = "source")
library("rstan")
remotes::install_github("stan-dev/rstan", ref = "develop", subdir = "rstan/rstan", build_opts = "")
remotes::install_github("stan-dev/rstan", ref = "develop", subdir = "rstan/rstan", build_opts = "")
install.packages("rstan", type = "source")
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
library("rstan") # observe startup messages
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
Sys.setenv(LOCAL_CPPFLAGS = '-march=native')
schools_dat <- list(
J = 8,
y = c(28,  8,-3,  7,-1,  1, 18, 12),
sigma = c(15, 10, 16, 11,  9, 11, 10, 18)
)
fit <- stan(file = '8schools.stan', data = schools_dat)
print(fit)
plot(fit)
install.packages(c("coda","mvtnorm","devtools"))
install.packages(c("coda", "mvtnorm", "devtools"))
install.packages(c("coda", "mvtnorm", "devtools"))
install.packages(c("coda", "mvtnorm", "devtools"))
install.packages(c("coda", "mvtnorm", "devtools"))
library(devtools)
devtools::install_github("rmcelreath/rethinking")
devtools::install_github("rmcelreath/rethinking")
remove.packages("rlang", lib="~/R/win-library/3.5")
devtools::install_github("rmcelreath/rethinking")
libray("Rcpp)
libray("Rcpp)
devtools::install_github("rmcelreath/rethinking")
library("Rcpp")
install.packages("Rcpp")
library(devtools)
install.packages("rlang")
library(devtools)
devtools::install_github("rmcelreath/rethinking")
devtools::install_github("rmcelreath/rethinking")
devtools::install_github("rmcelreath/rethinking")
devtools::install_github("rmcelreath/rethinking")
install.packages("digest")
library(digest)
devtools::install_github("rmcelreath/rethinking")
devtools::install_github("rmcelreath/rethinking")
libray(glue)
devtools::install_github("rmcelreath/rethinking")
install.packages("glue")
libray(glue)
library(glue)
devtools::install_github("rmcelreath/rethinking")
library(backports)
devtools::install_github("rmcelreath/rethinking")
devtools::install_github("rmcelreath/rethinking")
install.packages(:backports)
install.packages("backports")
library(backports)
devtools::install_github("rmcelreath/rethinking")
library(ps)
library(ps)
install.packages("ps")
install.packages("ps")
devtools::install_github("rmcelreath/rethinking")
library(rethinking)
data {
int<lower=0> J;         // number of schools
real y[J];              // estimated treatment effects
real<lower=0> sigma[J]; // standard error of effect estimates
}
parameters {
real mu;                // population treatment effect
real<lower=0> tau;      // standard deviation in treatment effects
vector[J] eta;          // unscaled deviation from mu by school
}
transformed parameters {
vector[J] theta = mu + tau * eta;        // school treatment effects
}
model {
target += normal_lpdf(eta | 0, 1);       // prior log-density
target += normal_lpdf(y | theta, sigma); // log-likelihood
}
data {
int<lower=0> J;         // number of schools
real y[J];              // estimated treatment effects
real<lower=0> sigma[J]; // standard error of effect estimates
}
schools_dat <- list(J = 8,
y = c(28,  8, -3,  7, -1,  1, 18, 12),
sigma = c(15, 10, 16, 11,  9, 11, 10, 18))
fit <- stan(file = '8schools.stan', data = schools_dat)
print(fit)
plot(fit)
library("rethinking", lib.loc="~/R/win-library/3.5")
p_grid <- seq( from=0 , to=1 , length.out=20 )
p_grid
length(p_grid)
prior <- rep( 1 , 20 )
prior
likelihood <- dbinom( 6 , size=9 , prob=p_grid )
likelihood
posterior <- unstd.posterior / sum(unstd.posterior)
unstd.posterior <- likelihood * prior
posterior <- unstd.posterior / sum(unstd.posterior)
plot( p_grid , posterior , type="b" , xlab="probability of water" , ylab="posterior probability" )
mtext( "20 points" )
prior <- ifelse( p_grid < 0.5 , 0 , 1 )
likelihood <- dbinom( 6 , size=9 , prob=p_grid )
unstd.posterior <- likelihood * prior
posterior <- unstd.posterior / sum(unstd.posterior)
plot( p_grid , posterior , type="b" , xlab="probability of water" , ylab="posterior probability" )
mtext( "20 points" )
prior <- exp( -5*abs( p_grid - 0.5 ) )
likelihood <- dbinom( 6 , size=9 , prob=p_grid )
unstd.posterior <- likelihood * prior
posterior <- unstd.posterior / sum(unstd.posterior)
plot( p_grid , posterior , type="b" , xlab="probability of water" , ylab="posterior probability" )
mtext( "20 points" )
likelihood
library(rethinking)
# define grid
p_grid <- seq( from=0 , to=1 , length.out=20 )
# define prior
prior <- rep( 1 , 20 )
# compute likelihood at each value in grid
likelihood <- dbinom( 8 , size=15 , prob=p_grid )
# compute product of likelihood and prior
unstd.posterior <- likelihood * prior
# standardize the posterior, so it sums to 1
posterior <- unstd.posterior / sum(unstd.posterior)
plot( p_grid , posterior , type="b" ,
xlab="probability of water" , ylab="posterior probability" )
mtext( "20 points" )
posterior
prior <- ifelse( p_grid < 0.5 , 0 , 1 )
prior
prior <- ifelse( p_grid < 0.5 , 0 , 1 )
# compute likelihood at each value in grid
likelihood <- dbinom( 8 , size=15 , prob=p_grid )
# compute product of likelihood and prior
unstd.posterior <- likelihood * prior
# standardize the posterior, so it sums to 1
posterior <- unstd.posterior / sum(unstd.posterior)
plot( p_grid , posterior , type="b" ,
xlab="probability of water" , ylab="posterior probability" )
mtext( "20 points" )
prior <- rep( 1 , 20 )
# compute likelihood at each value in grid
likelihood <- dbinom( 8 , size=15 , prob=p_grid )
# compute product of likelihood and prior
unstd.posterior <- likelihood * prior
# standardize the posterior, so it sums to 1
posterior <- unstd.posterior / sum(unstd.posterior)
plot( p_grid , posterior , type="b" ,
xlab="probability of water" , ylab="posterior probability" )
mtext( "20 points" )
# define grid
p_grid <- seq( from=0 , to=1 , length.out=20 )
# define prior
prior <- rep( 1 , 20 )
# prior <- ifelse( p_grid < 0.5 , 0 , 1 )
# compute likelihood at each value in grid
likelihood <- dbinom( 8 , size=100 , prob=p_grid )
# compute product of likelihood and prior
unstd.posterior <- likelihood * prior
# standardize the posterior, so it sums to 1
posterior <- unstd.posterior / sum(unstd.posterior)
plot( p_grid , posterior , type="b" ,
xlab="probability of water" , ylab="posterior probability" )
mtext( "20 points" )
# define grid
p_grid <- seq( from=0 , to=1 , length.out=100 )
# define prior
prior <- rep( 1 , 20 )
# prior <- ifelse( p_grid < 0.5 , 0 , 1 )
# compute likelihood at each value in grid
likelihood <- dbinom( 8 , size=100 , prob=p_grid )
# compute product of likelihood and prior
unstd.posterior <- likelihood * prior
# standardize the posterior, so it sums to 1
posterior <- unstd.posterior / sum(unstd.posterior)
plot( p_grid , posterior , type="b" ,
xlab="probability of water" , ylab="posterior probability" )
mtext( "20 points" )
p_grid <- seq(from=0,to=1,length.out=1000)
p_grid
prior <- rep(1,1000)
prior
prob_data <- dbinom(8,size=15,prob=p_grid)
prob_data
prob_data(1)
prob_data[1]
prob_data[12]
?dbinom
set.seed(100)
seed
set
samples <- sample( p_grid , prob=posterior , size=1e4 , replace=TRUE )
p_grid <- seq(from=0,to=1,length.out=1000)
prior <- rep(1,1000)
prob_data <- dbinom(8,size=15,prob=p_grid)
posterior <- prob_data * prior
posterior <- posterior/sum(posterior)
set.seed(100)
samples <- sample( p_grid , prob=posterior , size=1e4 , replace=TRUE )
samples
1e4
p_grid
prob
prob=posterior
prob
?sample
mean(posterior)
p_grid <- seq(from=0,to=1,length.out=1000)
prior <- rep(1,1000)
prob_data <- dbinom(8,size=15,prob=p_grid)
posterior <- prob_data * prior
posterior <- posterior/sum(posterior)
set.seed(100)
samples <- sample( p_grid , prob=posterior , size=1e4 , replace=TRUE )
p_grid <- seq( from=0 , to=1 , length.out=1000 )
prior <- c( rep( 0 , 500 ) , rep( 1 , 500 ) )
prob_data <- dbinom( 8 , size=15 , prob=p_grid )
posterior <- prob_data * prior
posterior <- posterior / sum(posterior) set.seed(100)
samples2 <- sample( p_grid , prob=posterior , size=1e4 , replace=TRUE )
p_grid <- seq(from=0,to=1,length.out=1000)
prior <- rep(1,1000)
prob_data <- dbinom(8,size=15,prob=p_grid)
posterior <- prob_data * prior
posterior <- posterior/sum(posterior)
set.seed(100)
samples <- sample( p_grid , prob=posterior , size=1e4 , replace=TRUE )
p_grid <- seq( from=0 , to=1 , length.out=1000 )
prior <- c( rep( 0 , 500 ) , rep( 1 , 500 ) )
prob_data <- dbinom( 8 , size=15 , prob=p_grid )
posterior <- prob_data * prior
posterior <- posterior / sum(posterior)
set.seed(100)
samples2 <- sample( p_grid , prob=posterior , size=1e4 , replace=TRUE )
dens( samples , xlab="p" , xlim=c(0,1) , ylim=c(0,6) )
dens( samples2 , add=TRUE , lty=2 )
abline( v=0.7 , col="red" )
dens( samples , xlab="p" , xlim=c(0,1) , ylim=c(0,6) )
dens( samples2 , add=TRUE , lty=2 )
library(rethinking)
dens( samples , xlab="p" , xlim=c(0,1) , ylim=c(0,6) )
dens( samples2 , add=TRUE , lty=2 )
abline( v=0.7 , col="red" )
# Load the libraries
library(ggplot2)
library(ggsci)
install.packages("ggsci")
library(MASS)
library(jmv)
install.packages("jmv")
library(ggplot2)
library(ggsci)
library(ggpubr)
library(readr)
library(ggstatsplot)
library(patchwork)
library(corrplot)
library(tidyr)
library(dplyr)
library(poolr)
library(ggsignif)
library(MASS)
library(jmv)
install.packages(c("poolr", "patchwork"))
# Load the libraries
library(ggplot2)
library(ggsci)
library(ggpubr)
library(readr)
library(ggstatsplot)
install.packages("ggpubr")
# Load the libraries
library(ggplot2)
library(ggsci)
library(ggpubr)
library(readr)
library(ggstatsplot)
install.packages("ggstatsplot")
version
setwd("~/")
# Loading libraries
library(tidyverse)
# Loading data
data <- read_csv("data.csv")
setwd("D:/Codebase/Viz_Others/Multiple_groups_mean_CI_skirt")
# Loading data
data <- read_csv("data.csv")
str(data)
# Columns names
colnames(data)
# Converting some columns into factors
data[, 1:6] <- lapply(data[, 1:6], as.factor)
# Visualisation
ggplot(data, aes (x = Zeitgeber_Time, y = Sleep,
colour=interaction(Group,Intervention,Recording_Time_Point,Phase, sep="-",lex.order=TRUE))) +
facet_wrap(~Phase) +
geom_point() +
labs(colour="Groups") +
scale_color_brewer(palette="Set2")
ggplot(data, aes(x = Zeitgeber_Time, y = Sleep,
group = 1)) +
stat_summary(geom="ribbon", fun.data=mean_cl_normal,
fun.args=list(conf.int = 0.68), fill = "lightblue", alpha = 0.3) +
stat_summary(geom = "line", fun = mean, linetype = "dashed") +
stat_summary(geom = "point", fun = mean, color = "red")
###############################################################################
geom_rect(data=NULL,aes(xmin=0.25, xmax=7.25, ymin=-Inf, ymax=Inf),
fill="lightgreen") +
geom_rect(data=NULL,aes(xmin=7.25, xmax=8.75, ymin=-Inf, ymax=Inf),
fill="darkgreen")
ggplot(data, aes(x = Zeitgeber_Time, y = Sleep,
group = 1)) +
stat_summary(geom="ribbon", fun.data=mean_cl_normal,
fun.args=list(conf.int = 0.68), fill = "lightblue", alpha = 0.3) +
stat_summary(geom = "line", fun = mean, linetype = "dashed") +
stat_summary(geom = "point", fun = mean, color = "red")
ggplot(data, aes (x = Zeitgeber_Time, y = Sleep,
colour=interaction(Group,Intervention,Recording_Time_Point,Phase, sep="-",lex.order=TRUE))) +
geom_point() +
labs(colour="Groups") +
theme_light()
ggplot(data, aes(x = Zeitgeber_Time, y = Sleep,
group = 1)) +
stat_summary(geom="ribbon", fun.data=mean_cl_normal,
fun.args=list(conf.int = 0.68), fill = "lightblue", alpha = 0.3) +
stat_summary(geom = "line", fun = mean, linetype = "dashed") +
stat_summary(geom = "point", fun = mean, color = "red")
###############################################################################
geom_rect(data=NULL,aes(xmin=0.25, xmax=7.25, ymin=-Inf, ymax=Inf),
fill="lightgreen") +
geom_rect(data=NULL,aes(xmin=7.25, xmax=8.75, ymin=-Inf, ymax=Inf),
fill="darkgreen")
ggplot(data, aes(x = Zeitgeber_Time, y = Sleep,
group = 1)) +
stat_summary(geom="ribbon", fun.data=mean_cl_normal,
fun.args=list(conf.int = 0.68), fill = "lightblue", alpha = 0.3) +
stat_summary(geom = "line", fun = mean, linetype = "dashed") +
stat_summary(geom = "point", fun = mean, color = "red") +
###############################################################################
geom_rect(data=NULL,aes(xmin=0.25, xmax=7.25, ymin=-Inf, ymax=Inf),
fill="lightgreen") +
geom_rect(data=NULL,aes(xmin=7.25, xmax=8.75, ymin=-Inf, ymax=Inf),
fill="darkgreen")
ggplot(data, aes(x = Zeitgeber_Time, y = Sleep,
group = 1)) +
stat_summary(geom="ribbon", fun.data=mean_cl_normal,
fun.args=list(conf.int = 0.68), fill = "lightblue", alpha = 0.3) +
stat_summary(geom = "line", fun = mean, linetype = "dashed") +
stat_summary(geom = "point", fun = mean, color = "red")
ggplot(data, aes (x = Zeitgeber_Time, y = Sleep,
colour=interaction(Group,Intervention,Recording_Time_Point,Phase, sep="-",lex.order=TRUE))) +
geom_point() +
labs(colour="Groups") +
theme_light()
View(data)
ggplot(data, aes (x = Zeitgeber_Time, y = Sleep,
colour=interaction(Group,Intervention,Recording_Time_Point,Phase, sep="-",lex.order=TRUE))) +
geom_point() +
labs(colour="Groups") +
theme_light()
