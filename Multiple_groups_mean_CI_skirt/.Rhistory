group = Recording_Time_Point)) +
stat_summary(geom = "line", fun = mean, aes(linetype = Recording_Time_Point),
color = color_select[loop]) +
stat_summary(geom = "point", fun = mean,
aes(color = paste("mean", Recording_Time_Point))) +
theme(legend.position = "none") +
stat_summary(geom ="ribbon", fun.data = mean_cl_normal,
fun.args = list(conf.int = 0.68), aes(fill = Recording_Time_Point),
alpha = 0.2)
plotname
color = color_select[loop])
color = color_select[loop]
color
ggplot(data_plot, aes(x = Zeitgeber_Time, y = Sleep,
group = Recording_Time_Point)) +
stat_summary(geom = "line", fun = mean, aes(linetype = Recording_Time_Point),
color = color_select[loop])
plotname <- ggplot(data_plot, aes(x = Zeitgeber_Time, y = Sleep,
group = Recording_Time_Point)) +
stat_summary(geom = "line", fun = mean, aes(linetype = Recording_Time_Point),
color = color_select[loop]) +
stat_summary(geom = "point", fun = mean,
aes(color = paste("mean", Recording_Time_Point))) +
theme(legend.position = "none") +
stat_summary(geom ="ribbon", fun.data = mean_cl_normal,
fun.args = list(conf.int = 0.68), aes(fill = Recording_Time_Point),
alpha = 0.2)
filename <- paste(plotname,".png",sep = "")
ggsave(filename, type = "cairo")
plotname <- ggplot(data_plot, aes(x = Zeitgeber_Time, y = Sleep,
group = Recording_Time_Point)) +
stat_summary(geom = "line", fun = mean, aes(linetype = Recording_Time_Point),
color = color_select[loop]) +
stat_summary(geom = "point", fun = mean,
aes(color = paste("mean", Recording_Time_Point))) +
theme(legend.position = "none") +
stat_summary(geom ="ribbon", fun.data = mean_cl_normal,
fun.args = list(conf.int = 0.68), aes(fill = Recording_Time_Point),
alpha = 0.2)
plotname
filename <- paste(plotname,".png",sep = "")
filename
str(plotname)
filename <- paste("plot_",loop,".png",sep = "")
filename
# Loading libraries
library(tidyverse)
library(Hmisc)
library(patchwork)
# Loading data
data <- read.csv('sleepdata.csv')
# Dropping first two columns
data <- select(data,-1,-2)
# Converting some columns into factors
data[, 1:5] <- lapply(data[, 1:5], as.factor)
str(data)
# Creating 4 plots capturing four conditions
# VS vs VSL coded by BLUE vs RED
# NPR vs SPR coded by Dark vs Light Shades
# p1 - VC-NPR BL vs PE
# p2 - VC-SPR BL vs PE
# p3 - VSL-NPR BL vs PE
# p4 - VSL-SPR BL vs PE
looper = c("p1_data", "p2_data", "p3_data", "p4_data")
color_select <- c("#203b46", "#8f1429", "#3A6B7E", "#f094a3")
for (loop in 1:4){
plotname <- paste("plot_",loop, sep = "")
if (loop == 1) {
data_plot <- data %>% filter(Group == 'VC' & Intervention == 'NPR')
} else if (loop == 2) {
data_plot <- ddata %>% filter(Group == 'VSL' & Intervention == 'NPR')
} else if (loop == 3) {
data_plot <- data %>% filter(Group == 'VC' & Intervention == 'SPR')
} else if (loop == 4){
data_plot <- data %>% filter(Group == 'VSL' & Intervention == 'SPR')
}
plotname <- ggplot(data_plot, aes(x = Zeitgeber_Time, y = Sleep,
group = Recording_Time_Point)) +
stat_summary(geom = "line", fun = mean, aes(linetype = Recording_Time_Point),
color = color_select[loop]) +
stat_summary(geom = "point", fun = mean,
aes(color = paste("mean", Recording_Time_Point))) +
theme(legend.position = "none") +
stat_summary(geom ="ribbon", fun.data = mean_cl_normal,
fun.args = list(conf.int = 0.68), aes(fill = Recording_Time_Point),
alpha = 0.2)
filename <- paste("plot_",loop,".png",sep = "")
ggsave(filename, type = "cairo")
}
# convert myGraphAsVector.pdf -density 300 myGraphAs300DpiBitmap.png
# https://github.com/robwschlegel/Intro_R_Workshop/blob/master/docs/08-mapping_style.md
# Loading libraries
library(tidyverse)
library(Hmisc)
library(patchwork)
# Loading data
data <- read.csv('sleepdata.csv')
# Dropping first two columns
data <- select(data,-1,-2)
# Converting some columns into factors
data[, 1:5] <- lapply(data[, 1:5], as.factor)
str(data)
# Creating 4 plots capturing four conditions
# VS vs VSL coded by BLUE vs RED
# NPR vs SPR coded by Dark vs Light Shades
# p1 - VC-NPR BL vs PE
# p2 - VC-SPR BL vs PE
# p3 - VSL-NPR BL vs PE
# p4 - VSL-SPR BL vs PE
looper = c("p1_data", "p2_data", "p3_data", "p4_data")
color_select <- c("#203b46", "#8f1429", "#3A6B7E", "#f094a3")
for (loop in 1:4){
plotname <- paste("plot_",loop, sep = "")
if (loop == 1) {
data_plot <- data %>% filter(Group == 'VC' & Intervention == 'NPR')
} else if (loop == 2) {
data_plot <- data %>% filter(Group == 'VSL' & Intervention == 'NPR')
} else if (loop == 3) {
data_plot <- data %>% filter(Group == 'VC' & Intervention == 'SPR')
} else if (loop == 4){
data_plot <- data %>% filter(Group == 'VSL' & Intervention == 'SPR')
}
plotname <- ggplot(data_plot, aes(x = Zeitgeber_Time, y = Sleep,
group = Recording_Time_Point)) +
stat_summary(geom = "line", fun = mean, aes(linetype = Recording_Time_Point),
color = color_select[loop]) +
stat_summary(geom = "point", fun = mean,
aes(color = paste("mean", Recording_Time_Point))) +
theme(legend.position = "none") +
stat_summary(geom ="ribbon", fun.data = mean_cl_normal,
fun.args = list(conf.int = 0.68), aes(fill = Recording_Time_Point),
alpha = 0.2)
filename <- paste("plot_",loop,".png",sep = "")
ggsave(filename, type = "cairo")
}
# convert myGraphAsVector.pdf -density 300 myGraphAs300DpiBitmap.png
# https://github.com/robwschlegel/Intro_R_Workshop/blob/master/docs/08-mapping_style.md
View(plotname)
data_plot <- data %>% filter(Group == 'VSL' & Intervention == 'SPR')
View(data_plot)
data_plot <- data %>% filter(Group == 'VC' & Intervention == 'SPR')
data_plot <- data %>% filter(Group == 'VSL' & Intervention == 'NPR')
# Loading libraries
library(tidyverse)
library(Hmisc)
library(patchwork)
# Loading data
data <- read.csv('sleepdata.csv')
# Dropping first two columns
data <- select(data,-1,-2)
# Converting some columns into factors
data[, 1:5] <- lapply(data[, 1:5], as.factor)
str(data)
# Creating 4 plots capturing four conditions
# VS vs VSL coded by BLUE vs RED
# NPR vs SPR coded by Dark vs Light Shades
# p1 - VC-NPR BL vs PE
# p2 - VC-SPR BL vs PE
# p3 - VSL-NPR BL vs PE
# p4 - VSL-SPR BL vs PE
looper = c("p1_data", "p2_data", "p3_data", "p4_data")
color_select <- c("#203b46", "#8f1429", "#3A6B7E", "#f094a3")
for (loop in 1:4){
plotname <- paste("plot_",loop, sep = "")
if (loop == 1) {
data_plot <- data %>% filter(Group == 'VC' & Intervention == 'NPR')
} else if (loop == 2) {
data_plot <- data %>% filter(Group == 'VSL' & Intervention == 'NPR')
} else if (loop == 3) {
data_plot <- data %>% filter(Group == 'VC' & Intervention == 'SPR')
} else if (loop == 4){
data_plot <- data %>% filter(Group == 'VSL' & Intervention == 'SPR')
}
plotname <- ggplot(data_plot, aes(x = Zeitgeber_Time, y = Sleep,
group = Recording_Time_Point)) +
stat_summary(geom = "line", fun = mean, aes(linetype = Recording_Time_Point),
color = color_select[loop]) +
stat_summary(geom = "point", fun = mean,
aes(color = paste("mean", Recording_Time_Point))) +
theme(legend.position = "none") +
stat_summary(geom ="ribbon", fun.data = mean_cl_normal,
fun.args = list(conf.int = 0.68), aes(fill = Recording_Time_Point),
alpha = 0.2)
filename <- paste("plot_",loop,".png",sep = "")
ggsave(filename, type = "cairo")
}
# convert myGraphAsVector.pdf -density 300 myGraphAs300DpiBitmap.png
# https://github.com/robwschlegel/Intro_R_Workshop/blob/master/docs/08-mapping_style.md
# Loading libraries
library(tidyverse)
library(Hmisc)
library(patchwork)
# Loading data
data <- read.csv('sleepdata.csv')
# Dropping first two columns
data <- select(data,-1,-2)
# Converting some columns into factors
data[, 1:5] <- lapply(data[, 1:5], as.factor)
str(data)
# Creating 4 plots capturing four conditions
# VS vs VSL coded by BLUE vs RED
# NPR vs SPR coded by Dark vs Light Shades
# p1 - VC-NPR BL vs PE
# p2 - VC-SPR BL vs PE
# p3 - VSL-NPR BL vs PE
# p4 - VSL-SPR BL vs PE
for (loop in 1:4){
plotname <- paste("plot_",loop, sep = "")
color_select <- c("#203b46", "#8f1429", "#3A6B7E", "#f094a3")
if (loop == 1) {
data_plot <- data %>% filter(Group == 'VC' & Intervention == 'NPR')
} else if (loop == 2) {
data_plot <- data %>% filter(Group == 'VSL' & Intervention == 'NPR')
} else if (loop == 3) {
data_plot <- data %>% filter(Group == 'VC' & Intervention == 'SPR')
} else if (loop == 4){
data_plot <- data %>% filter(Group == 'VSL' & Intervention == 'SPR')
}
plotname <- ggplot(data_plot, aes(x = Zeitgeber_Time, y = Sleep,
group = Recording_Time_Point)) +
stat_summary(geom = "line", fun = mean, aes(linetype = Recording_Time_Point),
color = color_select[loop]) +
stat_summary(geom = "point", fun = mean,
aes(color = paste("mean", Recording_Time_Point))) +
theme(legend.position = "none") +
stat_summary(geom ="ribbon", fun.data = mean_cl_normal,
fun.args = list(conf.int = 0.68), aes(fill = Recording_Time_Point),
alpha = 0.2)
filename <- paste("plot_",loop,".png",sep = "")
ggsave(filename, type = "cairo")
}
# convert myGraphAsVector.pdf -density 300 myGraphAs300DpiBitmap.png
# https://github.com/robwschlegel/Intro_R_Workshop/blob/master/docs/08-mapping_style.md
# Loading libraries
library(tidyverse)
library(Hmisc)
library(patchwork)
# Loading data
data <- read.csv('sleepdata.csv')
# Dropping first two columns
data <- select(data,-1,-2)
# Converting some columns into factors
data[, 1:5] <- lapply(data[, 1:5], as.factor)
str(data)
# Creating 4 plots capturing four conditions
# VS vs VSL coded by BLUE vs RED
# NPR vs SPR coded by Dark vs Light Shades
# p1 - VC-NPR BL vs PE
# p2 - VC-SPR BL vs PE
# p3 - VSL-NPR BL vs PE
# p4 - VSL-SPR BL vs PE
for (loop in 1:4){
plotname <- paste("plot_",loop, sep = "")
color_select <- c("#264653", "#2A9D8F", "#E9C46A", "#E76F51")
if (loop == 1) {
data_plot <- data %>% filter(Group == 'VC' & Intervention == 'NPR')
} else if (loop == 2) {
data_plot <- data %>% filter(Group == 'VSL' & Intervention == 'NPR')
} else if (loop == 3) {
data_plot <- data %>% filter(Group == 'VC' & Intervention == 'SPR')
} else if (loop == 4){
data_plot <- data %>% filter(Group == 'VSL' & Intervention == 'SPR')
}
plotname <- ggplot(data_plot, aes(x = Zeitgeber_Time, y = Sleep,
group = Recording_Time_Point)) +
stat_summary(geom = "line", fun = mean, aes(linetype = Recording_Time_Point),
color = color_select[loop]) +
stat_summary(geom = "point", fun = mean,
aes(color = paste("mean", Recording_Time_Point))) +
theme(legend.position = "none") +
stat_summary(geom ="ribbon", fun.data = mean_cl_normal,
fun.args = list(conf.int = 0.68), aes(fill = Recording_Time_Point),
alpha = 0.2)
filename <- paste("plot_",loop,".png",sep = "")
ggsave(filename, type = "cairo")
}
# convert myGraphAsVector.pdf -density 300 myGraphAs300DpiBitmap.png
# https://github.com/robwschlegel/Intro_R_Workshop/blob/master/docs/08-mapping_style.md
plotname
ggplot(data_plot, aes(x = Zeitgeber_Time, y = Sleep,
group = Recording_Time_Point)) +
stat_summary(geom = "line", fun = mean, aes(linetype = Recording_Time_Point),
color = color_select[loop]) +
stat_summary(geom = "point", fun = mean) +
theme(legend.position = "none") +
stat_summary(geom ="ribbon", fun.data = mean_cl_normal,
fun.args = list(conf.int = 0.68), aes(fill = Recording_Time_Point),
alpha = 0.2)
ggplot(data_plot, aes(x = Zeitgeber_Time, y = Sleep,
group = Recording_Time_Point)) +
stat_summary(geom = "line", fun = mean, aes(linetype = Recording_Time_Point),
color = color_select[loop]) +
stat_summary(geom = "point", fun = mean, size = 0.5) +
theme(legend.position = "none") +
stat_summary(geom ="ribbon", fun.data = mean_cl_normal,
fun.args = list(conf.int = 0.68), aes(fill = Recording_Time_Point),
alpha = 0.2)
# Loading libraries
library(tidyverse)
library(Hmisc)
library(patchwork)
# Loading data
data <- read.csv('sleepdata.csv')
# Dropping first two columns
data <- select(data,-1,-2)
# Converting some columns into factors
data[, 1:5] <- lapply(data[, 1:5], as.factor)
str(data)
# Creating 4 plots capturing four conditions
# VS vs VSL coded by BLUE vs RED
# NPR vs SPR coded by Dark vs Light Shades
# p1 - VC-NPR BL vs PE
# p2 - VC-SPR BL vs PE
# p3 - VSL-NPR BL vs PE
# p4 - VSL-SPR BL vs PE
for (loop in 1:4){
plotname <- paste("plot_",loop, sep = "")
color_select <- c("#264653", "#2A9D8F", "#E9C46A", "#E76F51")
if (loop == 1) {
data_plot <- data %>% filter(Group == 'VC' & Intervention == 'NPR')
} else if (loop == 2) {
data_plot <- data %>% filter(Group == 'VSL' & Intervention == 'NPR')
} else if (loop == 3) {
data_plot <- data %>% filter(Group == 'VC' & Intervention == 'SPR')
} else if (loop == 4){
data_plot <- data %>% filter(Group == 'VSL' & Intervention == 'SPR')
}
plotname <- ggplot(data_plot, aes(x = Zeitgeber_Time, y = Sleep,
group = Recording_Time_Point)) +
stat_summary(geom = "line", fun = mean, aes(linetype = Recording_Time_Point),
color = color_select[loop]) +
stat_summary(geom = "point", fun = mean, size = 0.5) +
theme(legend.position = "none") +
stat_summary(geom ="ribbon", fun.data = mean_cl_normal,
fun.args = list(conf.int = 0.68), aes(fill = Recording_Time_Point),
alpha = 0.2)
filename <- paste("plot_",loop,".png",sep = "")s
ggsave(filename, type = "cairo")
}
# convert myGraphAsVector.pdf -density 300 myGraphAs300DpiBitmap.png
# https://github.com/robwschlegel/Intro_R_Workshop/blob/master/docs/08-mapping_style.md
# Loading libraries
library(tidyverse)
library(Hmisc)
library(patchwork)
# Loading data
data <- read.csv('sleepdata.csv')
# Dropping first two columns
data <- select(data,-1,-2)
# Converting some columns into factors
data[, 1:5] <- lapply(data[, 1:5], as.factor)
str(data)
# Creating 4 plots capturing four conditions
# VS vs VSL coded by BLUE vs RED
# NPR vs SPR coded by Dark vs Light Shades
# p1 - VC-NPR BL vs PE
# p2 - VC-SPR BL vs PE
# p3 - VSL-NPR BL vs PE
# p4 - VSL-SPR BL vs PE
for (loop in 1:4){
plotname <- paste("plot_",loop, sep = "")
color_select <- c("#264653", "#2A9D8F", "#E9C46A", "#E76F51")
if (loop == 1) {
data_plot <- data %>% filter(Group == 'VC' & Intervention == 'NPR')
} else if (loop == 2) {
data_plot <- data %>% filter(Group == 'VSL' & Intervention == 'NPR')
} else if (loop == 3) {
data_plot <- data %>% filter(Group == 'VC' & Intervention == 'SPR')
} else if (loop == 4){
data_plot <- data %>% filter(Group == 'VSL' & Intervention == 'SPR')
}
plotname <- ggplot(data_plot, aes(x = Zeitgeber_Time, y = Sleep,
group = Recording_Time_Point)) +
stat_summary(geom = "line", fun = mean, aes(linetype = Recording_Time_Point),
color = color_select[loop]) +
stat_summary(geom = "point", fun = mean, size = 0.5) +
theme(legend.position = "none") +
stat_summary(geom ="ribbon", fun.data = mean_cl_normal,
fun.args = list(conf.int = 0.68), aes(fill = Recording_Time_Point),
alpha = 0.2)
filename <- paste("plot_",loop,".png",sep = "")
ggsave(filename, type = "cairo")
}
# convert myGraphAsVector.pdf -density 300 myGraphAs300DpiBitmap.png
# https://github.com/robwschlegel/Intro_R_Workshop/blob/master/docs/08-mapping_style.md
View(plotname)
View(plotname)
11520/6
data_plot <- data %>% filter(Group == 'VSL' & Intervention == 'SPR')
View(data_plot)
plotname <- paste("plot_",loop, sep = "")
plotname
plot_4 | plot_3
plotname
# Loading libraries
library(tidyverse)
library(Hmisc)
library(patchwork)
# Loading data
data <- read.csv('sleepdata.csv')
# Dropping first two columns
data <- select(data,-1,-2)
# Converting some columns into factors
data[, 1:5] <- lapply(data[, 1:5], as.factor)
str(data)
# Creating 4 plots capturing four conditions
# VS vs VSL coded by BLUE vs RED
# NPR vs SPR coded by Dark vs Light Shades
# p1 - VC-NPR BL vs PE
# p2 - VC-SPR BL vs PE
# p3 - VSL-NPR BL vs PE
# p4 - VSL-SPR BL vs PE
plot_list = list()
for (loop in 1:4){
plotname <- paste("plot_",loop, sep = "")
color_select <- c("#264653", "#2A9D8F", "#E9C46A", "#E76F51")
if (loop == 1) {
data_plot <- data %>% filter(Group == 'VC' & Intervention == 'NPR')
} else if (loop == 2) {
data_plot <- data %>% filter(Group == 'VSL' & Intervention == 'NPR')
} else if (loop == 3) {
data_plot <- data %>% filter(Group == 'VC' & Intervention == 'SPR')
} else if (loop == 4){
data_plot <- data %>% filter(Group == 'VSL' & Intervention == 'SPR')
}
plotname <- ggplot(data_plot, aes(x = Zeitgeber_Time, y = Sleep,
group = Recording_Time_Point)) +
stat_summary(geom = "line", fun = mean, aes(linetype = Recording_Time_Point),
color = color_select[loop]) +
stat_summary(geom = "point", fun = mean, size = 0.5) +
theme(legend.position = "none") +
stat_summary(geom ="ribbon", fun.data = mean_cl_normal,
fun.args = list(conf.int = 0.68), aes(fill = Recording_Time_Point),
alpha = 0.2)
filename <- paste("plot_",loop,".png",sep = "")
ggsave(filename, type = "cairo")
plot_list[[loop]] = plotname
}
# convert myGraphAsVector.pdf -density 300 myGraphAs300DpiBitmap.png
# https://github.com/robwschlegel/Intro_R_Workshop/blob/master/docs/08-mapping_style.md
plot_list[1] | plot_list[2]
plot_list[1]
plot_list[2]
plot_list[1] | plot_list[2]
library(patchwork)
View(plot_list)
plot_list[1] + plot_list[2]
p1 <- plot_list[1]
p2 <-  plot_list[2]
p1 + p2
p1 | p2
p1/p2
View(plot_list)
p1 <- plot_list[[1]
p1 <- plot_list[[1]]
View(plot_list)
p1 <- plot_list[[1]]
p2 <- plot_list[[2]]
p1 | p2
plot_list[[1]] + plot_list[[2]] + plot_list[[3]] + plot_list[[4]]
all_four <- plot_list[[1]] + plot_list[[2]] + plot_list[[3]] + plot_list[[4]]
ggsave("all_four.png", type = "cairo")
all_four
ggsave("all_four.png", dpi = 300,type = "cairo")
ggsave("all_four", dpi = 300,type = "cairo")
ggsave("all_four.jpg", dpi = 300,type = "cairo")
ggsave("all_four.jpg", dpi = 300,type = "cairo",
height=5, width=5, units="in")
ggsave("all_four.jpg", dpi = 300,type = "cairo",
height = 5, width = 8, units="in")
ggsave("all_four.jpg", dpi = 300,type = "cairo",
height = 4, width = 10, units="in")
ggsave("all_four.jpg", dpi = 300,type = "cairo",
height = 5, width = 10, units = "in")
setwd("~/GitHub/Viz_Others/Multiple_groups_mean_CI_skirt")
# Loading libraries
library(tidyverse)
library(Hmisc)
library(patchwork)
# Loading data
data <- read.csv('sleepdata.csv')
data <- select(data,-1,-2)
# Converting some columns into factors
data[, 1:5] <- lapply(data[, 1:5], as.factor)
str(data)
plot_list = list()
for (loop in 1:4){
plotname <- paste("plot_",loop, sep = "")
color_select <- c("#264653", "#2A9D8F", "#E9C46A", "#E76F51")
if (loop == 1) {
data_plot <- data %>% filter(Group == 'VC' & Intervention == 'NPR')
} else if (loop == 2) {
data_plot <- data %>% filter(Group == 'VSL' & Intervention == 'NPR')
} else if (loop == 3) {
data_plot <- data %>% filter(Group == 'VC' & Intervention == 'SPR')
} else if (loop == 4){
data_plot <- data %>% filter(Group == 'VSL' & Intervention == 'SPR')
}
plotname <- ggplot(data_plot, aes(x = Zeitgeber_Time, y = Sleep,
group = Recording_Time_Point)) +
stat_summary(geom = "line", fun = mean, aes(linetype = Recording_Time_Point),
color = color_select[loop]) +
stat_summary(geom = "point", fun = mean, size = 0.5) +
theme(legend.position = "none") +
stat_summary(geom ="ribbon", fun.data = mean_cl_normal,
fun.args = list(conf.int = 0.68), aes(fill = Recording_Time_Point),
alpha = 0.2)
plot_list[[loop]] = plotname
}
all_four <- plot_list[[1]] + plot_list[[2]] + plot_list[[3]] + plot_list[[4]]
ggsave("all_four.jpg", dpi = 300,type = "cairo",
height = 5, width = 10, units = "in")
